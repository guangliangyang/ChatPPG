[{"id":"c4d895f9-eca8-420f-b3ca-039b65b2acba","userId":"9191387c-1478-4c99-9705-8bd37f1f3c1a","function":{"id":"understandpdfilesforselftraining","name":"UnderstandPDFilesForSelfTraining","meta":{"description":"AI Real-Time Enhanced  read and understand PDF files uploaded or crawling with Deep Analysis and Structured Thinking","manifest":{},"type":"filter"},"content":"import subprocess\nimport sys\nimport io\nimport requests\nimport PyPDF2\nimport pandas as pd\nfrom typing import Optional, List, Dict  # Import Dict from typing\nfrom pydantic import BaseModel, Field\n\n\n# Function to install missing packages\ndef install_package(package):\n    try:\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n    except subprocess.CalledProcessError as e:\n        print(f\"Error installing {package}: {e}\")\n\n\n# Ensure required packages are installed\nrequired_packages = [\"PyPDF2\", \"pandas\", \"requests\", \"pydantic\"]\nfor package in required_packages:\n    try:\n        __import__(package)\n    except ImportError:\n        print(f\"{package} is not installed. Installing now...\")\n        install_package(package)\n\n\"\"\"\ntitle: AI Real-Time PDF Processing, Deep Analysis, and Dataset Conversion\nauthor: Eldar Mammadov\nauthor_url: https://www.azsec.biz\nversion: 1.2.0\nrequired_open_webui_version: 0.3.30\n\nv1.2.0 includes full PDF file reading, real-time content analysis, and optional dataset conversion.\n\"\"\"\n\n# Global instruction for the AI to autolearn and behave as instructed\nGLOBAL_INSTRUCTION = \"\"\"\nYou are an AI assistant by OpenAI. You can process PDF files uploaded by the user or access public links. \nYou must engage in deep thinking and analysis to extract meaningful data from PDFs, then use this data to self-train and improve.\nIf the user requests, convert the processed content into a dataset.\n\"\"\"\n\n\nclass Filter:\n    class Valves(BaseModel):\n        enable_pdf_processing: bool = Field(\n            default=True, description=\"Enable or disable PDF processing.\"\n        )\n        enable_autolearn: bool = Field(\n            default=True, description=\"Enable or disable real-time learning.\"\n        )\n        learning_mode: str = Field(\n            default=\"dynamic\",\n            description=\"Learning mode: 'dynamic' (continual) or 'static'.\",\n        )\n        store_knowledge: bool = Field(\n            default=True, description=\"Store learned knowledge for future use.\"\n        )\n        convert_to_dataset: bool = Field(\n            default=False,\n            description=\"Enable or disable PDF content conversion to dataset (e.g., Excel).\",\n        )\n\n    def __init__(self):\n        self.valves = self.Valves()\n        self.knowledge_base = []\n        self.global_instruction = GLOBAL_INSTRUCTION\n\n    def _think_about_task(self, task_description: str) -> str:\n        \"\"\"\n        This method simulates a deep thinking phase where the AI breaks down the task.\n        \"\"\"\n        thinking_phase = (\n            f\"## Thinking\\n\\n**Evaluating the task**\\nI am analyzing the task: {task_description}.\\n\"\n            f\"This will involve identifying key elements and breaking down the task into smaller components.\\n\"\n        )\n        thinking_phase += \"**Collecting Thoughts**\\nAfter identifying the task components, I will now focus on extracting relevant data.\\n\"\n        return thinking_phase\n\n    def _extract_text_from_pdf(self, pdf_file: io.BytesIO) -> List[str]:\n        \"\"\"\n        Extract text from the provided PDF file.\n        \"\"\"\n        pdf_reader = PyPDF2.PdfReader(pdf_file)\n        text_data = []\n\n        for page_num in range(len(pdf_reader.pages)):\n            page = pdf_reader.pages[page_num]\n            text_data.append(page.extract_text())\n\n        return text_data\n\n    def _download_pdf_from_link(self, pdf_url: str) -> io.BytesIO:\n        \"\"\"\n        Download the PDF file from the given URL and return it as a BytesIO object.\n        \"\"\"\n        headers = {\"User-Agent\": \"Mozilla/5.0\"}\n        response = requests.get(pdf_url, headers=headers)\n        response.raise_for_status()\n        return io.BytesIO(response.content)\n\n    def _process_pdf_content(self, pdf_content: List[str]) -> str:\n        \"\"\"\n        Perform deep analysis on the extracted PDF content.\n        \"\"\"\n        analysis_output = \"Deep Content Analysis of PDF:\\n\\n\"\n        for i, page_content in enumerate(pdf_content):\n            analysis_output += f\"Page {i + 1}:\\n{page_content.strip()}\\n\\n\"\n        return analysis_output\n\n    def process_pdf(\n        self, pdf_file: Optional[io.BytesIO] = None, pdf_link: Optional[str] = None\n    ) -> str:\n        \"\"\"\n        Process a PDF file either uploaded by the user or downloaded from a link.\n        \"\"\"\n        thinking_phase = self._think_about_task(\"Processing PDF file\")\n\n        # Process the PDF either from file or link\n        if pdf_file:\n            print(\"Processing uploaded PDF...\")\n            pdf_content = self._extract_text_from_pdf(pdf_file)\n        elif pdf_link:\n            print(f\"Downloading PDF from {pdf_link}...\")\n            pdf_file = self._download_pdf_from_link(pdf_link)\n            pdf_content = self._extract_text_from_pdf(pdf_file)\n        else:\n            return \"No PDF file or link provided.\"\n\n        # Perform deep analysis on the extracted content\n        return thinking_phase + \"\\n***\\n\" + self._process_pdf_content(pdf_content)\n\n    def _convert_pdf_to_dataset(\n        self, pdf_content: List[str], output_file: str = \"output.xlsx\"\n    ):\n        \"\"\"\n        Convert extracted PDF content into a dataset (Excel file).\n        \"\"\"\n        rows = []\n        for line in pdf_content:\n            for row in line.split(\"\\n\"):\n                rows.append(row.split())\n\n        df = pd.DataFrame(rows)\n        df.to_excel(output_file, index=False)\n        print(f\"PDF content saved to {output_file}.\")\n\n    def self_train_from_pdf(\n        self,\n        pdf_file: Optional[io.BytesIO] = None,\n        pdf_link: Optional[str] = None,\n        convert_to_dataset: bool = False,\n    ) -> None:\n        \"\"\"\n        Perform a self-training session from a PDF file or link and learn from its content.\n        Optionally, convert the PDF content into a dataset if requested.\n        \"\"\"\n        pdf_analysis = self.process_pdf(pdf_file, pdf_link)\n        print(f\"PDF Analysis and Learning:\\n{pdf_analysis}\")\n\n        # Extract and store the analysis for self-training\n        if convert_to_dataset:\n            self._convert_pdf_to_dataset(pdf_analysis.split(\"\\n\"), \"output.xlsx\")\n\n    def inlet(\n        self, body: Dict[str, any], __user__: Optional[Dict[str, any]] = None\n    ) -> Dict[str, any]:\n        \"\"\"Inlet method processes user input and triggers autolearning.\"\"\"\n        try:\n            print(self.global_instruction)\n            original_messages: List[Dict[str, str]] = body.get(\"messages\", [])\n            user_messages = [msg.get(\"content\", \"\") for msg in original_messages]\n\n            # Trigger dynamic or static learning based on settings\n            if self.valves.learning_mode == \"dynamic\":\n                for msg in user_messages:\n                    self._process_pdf_content(msg)\n            else:\n                if user_messages:\n                    self._process_pdf_content(user_messages[-1])\n\n            body[\"messages\"] = original_messages\n            return body\n        except Exception as e:\n            print(e)\n            return body\n\n    def outlet(\n        self, body: Dict[str, any], __user__: Optional[Dict[str, any]] = None\n    ) -> Dict[str, any]:\n        \"\"\"Outlet method finalizes autolearning after the conversation.\"\"\"\n        try:\n            original_messages: List[Dict[str, str]] = body.get(\"messages\", [])\n            for msg in original_messages:\n                self._process_pdf_content(msg.get(\"content\", \"\"))\n\n            return body\n        except Exception as e:\n            print(e)\n            return body\n"},"downloads":468,"upvotes":0,"downvotes":0,"updatedAt":1729298157,"createdAt":1729298157,"user":{"id":"9191387c-1478-4c99-9705-8bd37f1f3c1a","username":"eldar78","name":"","profileImageUrl":"https://www.gravatar.com/avatar/1bff80525e29758e41853cbc3ead2ff49da245745c3d719a1c01877e9c0a538f?d=mp","createdAt":1726252887}}]